// Generated by Touchlab SKIE 0.8.4

import Foundation

extension Shared.Skie.KotlinxSerializationCore.PolymorphicKind {

    @frozen
    public enum __Sealed : Swift.Hashable {

        case oPEN(Shared.Kotlinx_serialization_corePolymorphicKind.OPEN)
        case sEALED(Shared.Kotlinx_serialization_corePolymorphicKind.SEALED)

    }

}

public func onEnum<__Sealed : Shared.Kotlinx_serialization_corePolymorphicKind>(of sealed: __Sealed) -> Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed {
    if let sealed = sealed as? Shared.Kotlinx_serialization_corePolymorphicKind.OPEN {
        return Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed.oPEN(sealed)
    } else if let sealed = sealed as? Shared.Kotlinx_serialization_corePolymorphicKind.SEALED {
        return Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed.sEALED(sealed)
    } else {
        fatalError("Unknown subtype \(sealed). This error should not happen under normal circumstances since SirClass: Shared.Kotlinx_serialization_corePolymorphicKind is sealed.")
    }
}

@_disfavoredOverload
public func onEnum<__Sealed : Shared.Kotlinx_serialization_corePolymorphicKind>(of sealed: __Sealed?) -> Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed? {
    if let sealed {
        return onEnum(of: sealed) as Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed
    } else {
        return nil
    }
}
